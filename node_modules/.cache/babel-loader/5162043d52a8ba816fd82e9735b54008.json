{"ast":null,"code":"import React from 'react';\nexport class Store {\n  // defining store sections\n  // functions for different parts of store\n  // sets cache portion of store (kinda like React setState)\n  setCache(sector, data) {\n    this.cache = { ...this.cache,\n      [sector]: { ...this.cache[sector],\n        ...data\n      }\n    };\n  } // clears user info\n\n\n  wipeUser() {\n    this.user = { ...this.user,\n      username: \"\",\n      email: \"\",\n      taxon: \"\",\n      createdOn: \"\",\n      isLoggedIn: false,\n      images: {\n        profile: \"\"\n      }\n    };\n    this.channels = [];\n  }\n\n  raiseError() {\n    this.system.isError = true;\n    this.system.errorMessage = \"testing\";\n  }\n\n  initializeAnonToken() {\n    this.wipeUser();\n    u.deleteCookie(\"f30_tok\");\n    API.getAnonymousToken().then(success => {}, error => {\n      console.log(\"Error\");\n      console.log(error);\n    });\n  }\n\n  checkChannelOwnership(taxon) {\n    let isOwnedChannel = this.channels.filter(channel => {\n      return channel.taxon == taxon;\n    });\n    return isOwnedChannel.length > 0 ? true : false;\n  }\n\n  load() {\n    let jwtObject = API.getJWTObject();\n    let unlockEmitter = false;\n\n    if (jwtObject == null || jwtObject == undefined) {\n      this.initializeAnonToken();\n    }\n\n    API.getUser({}).then(success => {\n      if (success.status == 200 && success.data.length > 0) {\n        let u = success.data[0];\n        unlockEmitter = true;\n        this.user = {\n          username: u.username,\n          email: u.email_address,\n          taxon: u.taxon,\n          isLoggedIn: jwtObject.anonymous ? false : true,\n          createdOn: u.created_on,\n          isLoading: false,\n          rank: u.rank,\n          images: {\n            profile: u.profile_picture_url\n          }\n        };\n        this.channels = u.channels;\n      } else {\n        if (this.system.loadRetryCount < this.system.loadRetryLimit) {\n          this.system.loadRetryCount++;\n          this.initializeAnonToken();\n          this.load();\n          return;\n        }\n\n        this.user = { ...this.user,\n          isLoading: false\n        };\n        console.log(`Exceeded maximum retry count (out of ${this.system.loadRetryLimit}); halting store intialization.`);\n      }\n    }, error => {\n      console.log(\"Error\");\n      console.log(error);\n      u.deleteCookie(\"f30_tok\");\n\n      if (this.system.loadRetryCount < this.system.loadRetryLimit) {\n        this.system.loadRetryCount++;\n        this.initializeAnonToken();\n        this.load();\n        return;\n      }\n\n      this.user = { ...this.user,\n        isLoading: false\n      };\n      console.log(`Exceeded maximum retry count (out of ${this.system.loadRetryLimit}); halting store intialization.`);\n    }).finally(() => {\n      if (unlockEmitter) {\n        API.emitter.emit(\"storesynced\");\n      }\n    });\n  }\n\n  constructor() {\n    this.system = {\n      isError: false,\n      errorMessage: \"\",\n      loadRetryCount: 0,\n      loadRetryLimit: 3\n    };\n    this.user = {\n      username: \"\",\n      email: \"\",\n      taxon: \"\",\n      createdOn: \"\",\n      isLoggedIn: false,\n      isLoading: true,\n      rank: \"\",\n      images: {\n        profile: \"\"\n      }\n    };\n    this.channels = [];\n    this.cache = {\n      studio: {\n        isLoading: true,\n        isUpdating: false,\n        channel: {\n          title: \"\",\n          subscriberCount: 0,\n          taxon: \"\",\n          images: {\n            icon: \"\"\n          }\n        },\n        analytics: {\n          isLoading: true,\n          membershipCount: 0,\n          tipCount: 0,\n          statistics: {\n            totalViewCount: 0,\n            subscriberCount: 0,\n            membershipCount: 0\n          }\n        },\n        videos: []\n      },\n      vcc: {\n        isInitialLoading: true,\n        isLoading: true,\n        isError: false,\n        videos: [],\n        perPage: 30,\n        currentPage: 1\n      }\n    };\n    this.actions = {\n      studio: {\n        // studio - load channel\n        loadChannel: taxon => {\n          this.cache.studio.isUpdating = true;\n          API.getChannel({\n            taxon: taxon\n          }).then(success => {\n            if (success.status == 200) {\n              let c = success.data[0];\n              this.setCache(\"studio\", {\n                channel: {\n                  title: c.title,\n                  statistics: c.statistics,\n                  taxon: c.taxon,\n                  slug: c.slug,\n                  images: {\n                    icon: c.channel_picture_url\n                  }\n                }\n              });\n            }\n          }, error => {}).finally(() => {\n            API.getVideos({\n              page: 1,\n              perPage: 1000,\n              channelTaxon: taxon\n            }).then(success => {\n              if (success.status == 200) {\n                this.setCache(\"studio\", {\n                  isLoading: false,\n                  isUpdating: false,\n                  videos: success.data\n                });\n              }\n            }).finally(() => {\n              if (this.cache.studio.videos.length > 0) {\n                console.log(this.cache.studio.videos.length);\n\n                for (var v of this.cache.studio.videos) {\n                  v.processed = true; // let m = v.media;\n                  // v.processed = (m.transforms[240] !== null || m.transforms[480] !== null || m.transforms[720] !== null || m.transforms[1080] !== null);\n                }\n              }\n            });\n          });\n          API.getChannelAnalytics({\n            channelTaxon: taxon\n          }).then(success => {\n            if (success.status == 200) {\n              let a = success.data;\n              this.setCache(\"studio\", {\n                analytics: {\n                  isLoading: false,\n                  membershipCount: a.membership_count,\n                  tipCount: a.tip_count,\n                  statistics: {\n                    totalViewCount: a.stats ? a.stats.total_view_count : 0,\n                    subscriberCount: a.stats ? a.stats.subscriber_count : 0,\n                    membershipCount: a.stats ? a.stats.membership_count : 0\n                  }\n                }\n              });\n            }\n          });\n        },\n        // studio - check video process\n        updateVideoProcess: (taxon, onProgress = null) => {\n          let emitOnProgress = message => {\n            if (onProgress) {\n              onProgress(message);\n            }\n          };\n\n          return new Promise((resolve, reject) => {\n            emitOnProgress(\"Checking EPIC.IO manifest for \" + taxon + \"...\");\n            API.getVideoManifest(taxon).then(success => {\n              // shortnaming manifest\n              try {\n                let man = success.data; // checking if manifest has successfully completed\n\n                if (man.meta.status === \"SUCCESS\") {\n                  emitOnProgress(\"Manifest successful for \" + taxon + \"...\");\n                  emitOnProgress(\"Generating transforms for video object...\"); // generates a valid body for update video with transforms setup\n\n                  let body = Utilities.generateUpdateVideoBodyFromManifest(taxon, man); // updating video object\n\n                  API.updateVideo(body).then(success => {\n                    // emitOnProgress(\"Video media has been copied successfully.\");\n                    resolve(\"Video media has been copied successfully.\");\n                  });\n                } else {\n                  console.error(\"Video processing failed from EPIC.IO for \" + taxon + \".\");\n                  reject(\"Video processing failed from EPIC.IO for \" + taxon + \".\");\n                }\n              } catch (error) {\n                reject(\"Exception occured in manifest function stack\");\n              }\n            }, error => {\n              console.log(\"Error reached on video update\");\n              reject(\"Error reached on video manifest request.\");\n            });\n          });\n        }\n      },\n      vcc: {\n        load: parameters => {\n          this.setCache(\"vcc\", {\n            isLoading: true\n          });\n\n          if (parameters.latest) {\n            API.getVideos({\n              perPage: this.cache.vcc.perPage,\n              page: this.cache.vcc.currentPage,\n              latest: true\n            }).then(success => {\n              if (success.status == 200) {\n                this.setCache(\"vcc\", {\n                  isLoading: false,\n                  isInitialLoading: false,\n                  isError: false,\n                  videos: this.cache.vcc.videos.concat(success.data)\n                });\n              } else {\n                this.setCache(\"vcc\", {\n                  isLoading: false,\n                  isInitialLoading: false,\n                  isError: true\n                });\n              }\n            }, error => {\n              this.setCache(\"vcc\", {\n                isLoading: false,\n                isInitialLoading: false,\n                isError: true\n              });\n            });\n          } else if (parameters.hot) {\n            API.getVideos({\n              perPage: this.cache.vcc.perPage,\n              page: this.cache.vcc.currentPage,\n              hot: true\n            }).then(success => {\n              if (success.status == 200) {\n                this.setCache(\"vcc\", {\n                  isLoading: false,\n                  isInitialLoading: false,\n                  isError: false,\n                  videos: this.cache.vcc.videos.concat(success.data)\n                });\n              } else {\n                this.setCache(\"vcc\", {\n                  isLoading: false,\n                  isInitialLoading: false,\n                  isError: true\n                });\n              }\n            }, error => {\n              this.setCache(\"vcc\", {\n                isLoading: false,\n                isInitialLoading: false,\n                isError: true\n              });\n            });\n          } else if (parameters.trending) {\n            API.getVideos({\n              perPage: this.cache.vcc.perPage,\n              page: this.cache.vcc.currentPage,\n              trending: true\n            }).then(success => {\n              if (success.status == 200) {\n                this.setCache(\"vcc\", {\n                  isLoading: false,\n                  isInitialLoading: false,\n                  isError: false,\n                  videos: this.cache.vcc.videos.concat(success.data)\n                });\n              } else {\n                this.setCache(\"vcc\", {\n                  isLoading: false,\n                  isInitialLoading: false,\n                  isError: true\n                });\n              }\n            }, error => {\n              this.setCache(\"vcc\", {\n                isLoading: false,\n                isInitialLoading: false,\n                isError: true\n              });\n            });\n          } else {\n            API.getVideos({\n              perPage: this.cache.vcc.perPage,\n              page: this.cache.vcc.currentPage\n            }).then(success => {\n              if (success.status == 200) {\n                this.setCache(\"vcc\", {\n                  isLoading: false,\n                  isInitialLoading: false,\n                  isError: false,\n                  videos: this.cache.vcc.videos.concat(success.data)\n                });\n              } else {\n                this.setCache(\"vcc\", {\n                  isLoading: false,\n                  isInitialLoading: false,\n                  isError: true\n                });\n              }\n            }, error => {\n              this.setCache(\"vcc\", {\n                isLoading: false,\n                isInitialLoading: false,\n                isError: true\n              });\n            });\n          }\n        },\n        getNextPage: parameters => {\n          this.setCache(\"vcc\", {\n            currentPage: this.cache.vcc.currentPage + 1\n          });\n          this.actions.vcc.load(parameters);\n        },\n        clearVideos: () => {\n          this.setCache(\"vcc\", {\n            videos: []\n          });\n        },\n        reinit: () => {\n          this.actions.vcc.clearVideos();\n          this.setCache(\"vcc\", {\n            isInitialLoading: true,\n            currentPage: 1\n          });\n        }\n      }\n    };\n    console.log(\"store init called\");\n    this.load();\n  }\n\n}\ndecorate(Store, {\n  user: observable,\n  channels: observable,\n  cache: observable\n});\nexport let store = new Store();","map":{"version":3,"sources":["/Users/hfish/Development/school/software_engineering/crafting_tracker/src/Store.js"],"names":["React","Store","setCache","sector","data","cache","wipeUser","user","username","email","taxon","createdOn","isLoggedIn","images","profile","channels","raiseError","system","isError","errorMessage","initializeAnonToken","u","deleteCookie","API","getAnonymousToken","then","success","error","console","log","checkChannelOwnership","isOwnedChannel","filter","channel","length","load","jwtObject","getJWTObject","unlockEmitter","undefined","getUser","status","email_address","anonymous","created_on","isLoading","rank","profile_picture_url","loadRetryCount","loadRetryLimit","finally","emitter","emit","constructor","studio","isUpdating","title","subscriberCount","icon","analytics","membershipCount","tipCount","statistics","totalViewCount","videos","vcc","isInitialLoading","perPage","currentPage","actions","loadChannel","getChannel","c","slug","channel_picture_url","getVideos","page","channelTaxon","v","processed","getChannelAnalytics","a","membership_count","tip_count","stats","total_view_count","subscriber_count","updateVideoProcess","onProgress","emitOnProgress","message","Promise","resolve","reject","getVideoManifest","man","meta","body","Utilities","generateUpdateVideoBodyFromManifest","updateVideo","parameters","latest","concat","hot","trending","getNextPage","clearVideos","reinit","decorate","observable","store"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAN,CAAY;AACf;AAyDA;AAyPA;AACAC,EAAAA,QAAQ,CAACC,MAAD,EAASC,IAAT,EAAe;AACnB,SAAKC,KAAL,GAAa,EACT,GAAG,KAAKA,KADC;AAET,OAACF,MAAD,GAAU,EACN,GAAG,KAAKE,KAAL,CAAWF,MAAX,CADG;AAEN,WAAGC;AAFG;AAFD,KAAb;AAOH,GA5Tc,CA8Tf;;;AACAE,EAAAA,QAAQ,GAAG;AACP,SAAKC,IAAL,GAAY,EACR,GAAG,KAAKA,IADA;AAERC,MAAAA,QAAQ,EAAE,EAFF;AAGRC,MAAAA,KAAK,EAAE,EAHC;AAIRC,MAAAA,KAAK,EAAE,EAJC;AAKRC,MAAAA,SAAS,EAAE,EALH;AAMRC,MAAAA,UAAU,EAAE,KANJ;AAORC,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE;AADL;AAPA,KAAZ;AAWA,SAAKC,QAAL,GAAgB,EAAhB;AACH;;AAEDC,EAAAA,UAAU,GAAG;AACT,SAAKC,MAAL,CAAYC,OAAZ,GAAsB,IAAtB;AACA,SAAKD,MAAL,CAAYE,YAAZ,GAA2B,SAA3B;AACH;;AAEDC,EAAAA,mBAAmB,GAAG;AAClB,SAAKd,QAAL;AACAe,IAAAA,CAAC,CAACC,YAAF,CAAe,SAAf;AACAC,IAAAA,GAAG,CAACC,iBAAJ,GAAwBC,IAAxB,CACKC,OAAD,IAAa,CACZ,CAFL,EAGKC,KAAD,IAAW;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KANL;AAQH;;AAEDG,EAAAA,qBAAqB,CAACpB,KAAD,EAAQ;AACzB,QAAIqB,cAAc,GAAG,KAAKhB,QAAL,CAAciB,MAAd,CAAsBC,OAAD,IAAa;AACnD,aAAOA,OAAO,CAACvB,KAAR,IAAiBA,KAAxB;AACH,KAFoB,CAArB;AAIA,WAAQqB,cAAc,CAACG,MAAf,GAAwB,CAAxB,GAA4B,IAA5B,GAAmC,KAA3C;AACH;;AAEDC,EAAAA,IAAI,GAAG;AACH,QAAIC,SAAS,GAAGb,GAAG,CAACc,YAAJ,EAAhB;AACA,QAAIC,aAAa,GAAG,KAApB;;AAEA,QAAGF,SAAS,IAAI,IAAb,IAAqBA,SAAS,IAAIG,SAArC,EAAgD;AAC5C,WAAKnB,mBAAL;AACH;;AAEDG,IAAAA,GAAG,CAACiB,OAAJ,CAAY,EAAZ,EAAgBf,IAAhB,CACKC,OAAD,IAAa;AACT,UAAIA,OAAO,CAACe,MAAR,IAAkB,GAAlB,IAAyBf,OAAO,CAACtB,IAAR,CAAa8B,MAAb,GAAsB,CAAnD,EAAsD;AAClD,YAAIb,CAAC,GAAGK,OAAO,CAACtB,IAAR,CAAa,CAAb,CAAR;AACAkC,QAAAA,aAAa,GAAG,IAAhB;AACA,aAAK/B,IAAL,GAAY;AACRC,UAAAA,QAAQ,EAAEa,CAAC,CAACb,QADJ;AAERC,UAAAA,KAAK,EAAEY,CAAC,CAACqB,aAFD;AAGRhC,UAAAA,KAAK,EAAEW,CAAC,CAACX,KAHD;AAIRE,UAAAA,UAAU,EAAEwB,SAAS,CAACO,SAAV,GAAsB,KAAtB,GAA8B,IAJlC;AAKRhC,UAAAA,SAAS,EAAEU,CAAC,CAACuB,UALL;AAMRC,UAAAA,SAAS,EAAE,KANH;AAORC,UAAAA,IAAI,EAAEzB,CAAC,CAACyB,IAPA;AAQRjC,UAAAA,MAAM,EAAE;AACJC,YAAAA,OAAO,EAAEO,CAAC,CAAC0B;AADP;AARA,SAAZ;AAYA,aAAKhC,QAAL,GAAgBM,CAAC,CAACN,QAAlB;AACH,OAhBD,MAgBO;AACH,YAAG,KAAKE,MAAL,CAAY+B,cAAZ,GAA6B,KAAK/B,MAAL,CAAYgC,cAA5C,EAA4D;AACxD,eAAKhC,MAAL,CAAY+B,cAAZ;AACA,eAAK5B,mBAAL;AACA,eAAKe,IAAL;AACA;AACH;;AACD,aAAK5B,IAAL,GAAY,EACR,GAAG,KAAKA,IADA;AAERsC,UAAAA,SAAS,EAAE;AAFH,SAAZ;AAIAjB,QAAAA,OAAO,CAACC,GAAR,CAAa,wCAAuC,KAAKZ,MAAL,CAAYgC,cAAe,iCAA/E;AACH;AACJ,KA/BL,EAgCKtB,KAAD,IAAW;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAN,MAAAA,CAAC,CAACC,YAAF,CAAe,SAAf;;AACA,UAAG,KAAKL,MAAL,CAAY+B,cAAZ,GAA6B,KAAK/B,MAAL,CAAYgC,cAA5C,EAA4D;AACxD,aAAKhC,MAAL,CAAY+B,cAAZ;AACA,aAAK5B,mBAAL;AACA,aAAKe,IAAL;AACA;AACH;;AACD,WAAK5B,IAAL,GAAY,EACR,GAAG,KAAKA,IADA;AAERsC,QAAAA,SAAS,EAAE;AAFH,OAAZ;AAIAjB,MAAAA,OAAO,CAACC,GAAR,CAAa,wCAAuC,KAAKZ,MAAL,CAAYgC,cAAe,iCAA/E;AACH,KA/CL,EAgDEC,OAhDF,CAgDU,MAAM;AACZ,UAAGZ,aAAH,EAAkB;AACdf,QAAAA,GAAG,CAAC4B,OAAJ,CAAYC,IAAZ,CAAiB,aAAjB;AACH;AACJ,KApDD;AAqDH;;AAEDC,EAAAA,WAAW,GAAG;AAAA,SAradpC,MAqac,GAraL;AACLC,MAAAA,OAAO,EAAE,KADJ;AAELC,MAAAA,YAAY,EAAE,EAFT;AAGL6B,MAAAA,cAAc,EAAE,CAHX;AAILC,MAAAA,cAAc,EAAE;AAJX,KAqaK;AAAA,SA9Zd1C,IA8Zc,GA9ZP;AACHC,MAAAA,QAAQ,EAAE,EADP;AAEHC,MAAAA,KAAK,EAAE,EAFJ;AAGHC,MAAAA,KAAK,EAAE,EAHJ;AAIHC,MAAAA,SAAS,EAAE,EAJR;AAKHC,MAAAA,UAAU,EAAE,KALT;AAMHiC,MAAAA,SAAS,EAAE,IANR;AAOHC,MAAAA,IAAI,EAAE,EAPH;AAQHjC,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE;AADL;AARL,KA8ZO;AAAA,SAjZdC,QAiZc,GAjZH,EAiZG;AAAA,SA/YdV,KA+Yc,GA/YN;AACJiD,MAAAA,MAAM,EAAE;AACJT,QAAAA,SAAS,EAAE,IADP;AAEJU,QAAAA,UAAU,EAAE,KAFR;AAGJtB,QAAAA,OAAO,EAAE;AACLuB,UAAAA,KAAK,EAAE,EADF;AAELC,UAAAA,eAAe,EAAE,CAFZ;AAGL/C,UAAAA,KAAK,EAAE,EAHF;AAILG,UAAAA,MAAM,EAAE;AACJ6C,YAAAA,IAAI,EAAE;AADF;AAJH,SAHL;AAWJC,QAAAA,SAAS,EAAE;AACPd,UAAAA,SAAS,EAAE,IADJ;AAEPe,UAAAA,eAAe,EAAE,CAFV;AAGPC,UAAAA,QAAQ,EAAE,CAHH;AAIPC,UAAAA,UAAU,EAAE;AACRC,YAAAA,cAAc,EAAE,CADR;AAERN,YAAAA,eAAe,EAAE,CAFT;AAGRG,YAAAA,eAAe,EAAE;AAHT;AAJL,SAXP;AAqBJI,QAAAA,MAAM,EAAE;AArBJ,OADJ;AAwBJC,MAAAA,GAAG,EAAE;AACDC,QAAAA,gBAAgB,EAAE,IADjB;AAEDrB,QAAAA,SAAS,EAAE,IAFV;AAGD3B,QAAAA,OAAO,EAAE,KAHR;AAID8C,QAAAA,MAAM,EAAE,EAJP;AAKDG,QAAAA,OAAO,EAAE,EALR;AAMDC,QAAAA,WAAW,EAAE;AANZ;AAxBD,KA+YM;AAAA,SA5WdC,OA4Wc,GA5WJ;AACNf,MAAAA,MAAM,EAAE;AACJ;AACAgB,QAAAA,WAAW,EAAG5D,KAAD,IAAW;AACpB,eAAKL,KAAL,CAAWiD,MAAX,CAAkBC,UAAlB,GAA+B,IAA/B;AACAhC,UAAAA,GAAG,CAACgD,UAAJ,CAAe;AAAC7D,YAAAA,KAAK,EAAEA;AAAR,WAAf,EAA+Be,IAA/B,CACKC,OAAD,IAAa;AACT,gBAAGA,OAAO,CAACe,MAAR,IAAkB,GAArB,EAA0B;AACtB,kBAAI+B,CAAC,GAAG9C,OAAO,CAACtB,IAAR,CAAa,CAAb,CAAR;AACA,mBAAKF,QAAL,CAAc,QAAd,EAAwB;AACpB+B,gBAAAA,OAAO,EAAE;AACLuB,kBAAAA,KAAK,EAAEgB,CAAC,CAAChB,KADJ;AAELM,kBAAAA,UAAU,EAAEU,CAAC,CAACV,UAFT;AAGLpD,kBAAAA,KAAK,EAAE8D,CAAC,CAAC9D,KAHJ;AAIL+D,kBAAAA,IAAI,EAAED,CAAC,CAACC,IAJH;AAKL5D,kBAAAA,MAAM,EAAE;AACJ6C,oBAAAA,IAAI,EAAEc,CAAC,CAACE;AADJ;AALH;AADW,eAAxB;AAWH;AACJ,WAhBL,EAiBK/C,KAAD,IAAW,CAEV,CAnBL,EAoBEuB,OApBF,CAqBI,MAAM;AACF3B,YAAAA,GAAG,CAACoD,SAAJ,CAAc;AAACC,cAAAA,IAAI,EAAE,CAAP;AAAUT,cAAAA,OAAO,EAAE,IAAnB;AAAyBU,cAAAA,YAAY,EAAEnE;AAAvC,aAAd,EAA6De,IAA7D,CACKC,OAAD,IAAa;AACT,kBAAGA,OAAO,CAACe,MAAR,IAAkB,GAArB,EAA0B;AACtB,qBAAKvC,QAAL,CAAc,QAAd,EAAwB;AACpB2C,kBAAAA,SAAS,EAAE,KADS;AAEpBU,kBAAAA,UAAU,EAAE,KAFQ;AAGpBS,kBAAAA,MAAM,EAAEtC,OAAO,CAACtB;AAHI,iBAAxB;AAKH;AACJ,aATL,EAUE8C,OAVF,CAWI,MAAM;AACF,kBAAG,KAAK7C,KAAL,CAAWiD,MAAX,CAAkBU,MAAlB,CAAyB9B,MAAzB,GAAkC,CAArC,EAAwC;AACpCN,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWiD,MAAX,CAAkBU,MAAlB,CAAyB9B,MAArC;;AACA,qBAAI,IAAI4C,CAAR,IAAa,KAAKzE,KAAL,CAAWiD,MAAX,CAAkBU,MAA/B,EAAuC;AACnCc,kBAAAA,CAAC,CAACC,SAAF,GAAc,IAAd,CADmC,CAEnC;AACA;AACH;AACJ;AACJ,aApBL;AAsBH,WA5CL;AA+CAxD,UAAAA,GAAG,CAACyD,mBAAJ,CAAwB;AAACH,YAAAA,YAAY,EAAEnE;AAAf,WAAxB,EAA+Ce,IAA/C,CACKC,OAAD,IAAa;AACT,gBAAGA,OAAO,CAACe,MAAR,IAAkB,GAArB,EAA0B;AACtB,kBAAIwC,CAAC,GAAGvD,OAAO,CAACtB,IAAhB;AACA,mBAAKF,QAAL,CAAc,QAAd,EAAwB;AACpByD,gBAAAA,SAAS,EAAE;AACPd,kBAAAA,SAAS,EAAE,KADJ;AAEPe,kBAAAA,eAAe,EAAEqB,CAAC,CAACC,gBAFZ;AAGPrB,kBAAAA,QAAQ,EAAEoB,CAAC,CAACE,SAHL;AAIPrB,kBAAAA,UAAU,EAAE;AACRC,oBAAAA,cAAc,EAAEkB,CAAC,CAACG,KAAF,GAAUH,CAAC,CAACG,KAAF,CAAQC,gBAAlB,GAAqC,CAD7C;AAER5B,oBAAAA,eAAe,EAAEwB,CAAC,CAACG,KAAF,GAAUH,CAAC,CAACG,KAAF,CAAQE,gBAAlB,GAAqC,CAF9C;AAGR1B,oBAAAA,eAAe,EAAEqB,CAAC,CAACG,KAAF,GAAUH,CAAC,CAACG,KAAF,CAAQF,gBAAlB,GAAqC;AAH9C;AAJL;AADS,eAAxB;AAYH;AACJ,WAjBL;AAmBH,SAtEG;AAuEJ;AACAK,QAAAA,kBAAkB,EAAE,CAAC7E,KAAD,EAAQ8E,UAAU,GAAG,IAArB,KAA8B;AAC9C,cAAIC,cAAc,GAAIC,OAAD,IAAa;AAC9B,gBAAGF,UAAH,EAAe;AACXA,cAAAA,UAAU,CAACE,OAAD,CAAV;AACH;AACJ,WAJD;;AAKA,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCJ,YAAAA,cAAc,CAAC,mCAAmC/E,KAAnC,GAA2C,KAA5C,CAAd;AACAa,YAAAA,GAAG,CAACuE,gBAAJ,CAAqBpF,KAArB,EAA4Be,IAA5B,CACKC,OAAD,IAAa;AACT;AACA,kBAAI;AACA,oBAAIqE,GAAG,GAAGrE,OAAO,CAACtB,IAAlB,CADA,CAGA;;AACA,oBAAG2F,GAAG,CAACC,IAAJ,CAASvD,MAAT,KAAoB,SAAvB,EAAkC;AAC9BgD,kBAAAA,cAAc,CAAC,6BAA6B/E,KAA7B,GAAqC,KAAtC,CAAd;AAEA+E,kBAAAA,cAAc,CAAC,2CAAD,CAAd,CAH8B,CAI9B;;AACA,sBAAIQ,IAAI,GAAGC,SAAS,CAACC,mCAAV,CAA8CzF,KAA9C,EAAqDqF,GAArD,CAAX,CAL8B,CAO9B;;AACAxE,kBAAAA,GAAG,CAAC6E,WAAJ,CAAgBH,IAAhB,EAAsBxE,IAAtB,CACKC,OAAD,IAAa;AACT;AACAkE,oBAAAA,OAAO,CAAC,2CAAD,CAAP;AACH,mBAJL;AAMH,iBAdD,MAcO;AACHhE,kBAAAA,OAAO,CAACD,KAAR,CAAc,8CAA8CjB,KAA9C,GAAsD,GAApE;AACAmF,kBAAAA,MAAM,CAAC,8CAA8CnF,KAA9C,GAAsD,GAAvD,CAAN;AACH;AACJ,eAtBD,CAsBE,OAAMiB,KAAN,EAAa;AACXkE,gBAAAA,MAAM,CAAC,8CAAD,CAAN;AACH;AACJ,aA5BL,EA6BKlE,KAAD,IAAW;AACPC,cAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAgE,cAAAA,MAAM,CAAC,0CAAD,CAAN;AACH,aAhCL;AAkCH,WApCM,CAAP;AAqCH;AAnHG,OADF;AAsHN5B,MAAAA,GAAG,EAAE;AACD9B,QAAAA,IAAI,EAAGkE,UAAD,IAAgB;AAClB,eAAKnG,QAAL,CAAc,KAAd,EAAqB;AAAC2C,YAAAA,SAAS,EAAE;AAAZ,WAArB;;AACA,cAAGwD,UAAU,CAACC,MAAd,EAAsB;AAClB/E,YAAAA,GAAG,CAACoD,SAAJ,CAAc;AAAER,cAAAA,OAAO,EAAE,KAAK9D,KAAL,CAAW4D,GAAX,CAAeE,OAA1B;AAAmCS,cAAAA,IAAI,EAAE,KAAKvE,KAAL,CAAW4D,GAAX,CAAeG,WAAxD;AAAqEkC,cAAAA,MAAM,EAAE;AAA7E,aAAd,EAAmG7E,IAAnG,CACKC,OAAD,IAAa;AACT,kBAAGA,OAAO,CAACe,MAAR,IAAkB,GAArB,EAA0B;AACtB,qBAAKvC,QAAL,CAAc,KAAd,EAAqB;AACjB2C,kBAAAA,SAAS,EAAE,KADM;AAEjBqB,kBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,kBAAAA,OAAO,EAAE,KAHQ;AAIjB8C,kBAAAA,MAAM,EAAE,KAAK3D,KAAL,CAAW4D,GAAX,CAAeD,MAAf,CAAsBuC,MAAtB,CAA6B7E,OAAO,CAACtB,IAArC;AAJS,iBAArB;AAMH,eAPD,MAOO;AACH,qBAAKF,QAAL,CAAc,KAAd,EAAqB;AACjB2C,kBAAAA,SAAS,EAAE,KADM;AAEjBqB,kBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,kBAAAA,OAAO,EAAE;AAHQ,iBAArB;AAKH;AACJ,aAhBL,EAiBKS,KAAD,IAAW;AACP,mBAAKzB,QAAL,CAAc,KAAd,EAAqB;AACjB2C,gBAAAA,SAAS,EAAE,KADM;AAEjBqB,gBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,gBAAAA,OAAO,EAAE;AAHQ,eAArB;AAKH,aAvBL;AAyBH,WA1BD,MA0BO,IAAGmF,UAAU,CAACG,GAAd,EAAmB;AACtBjF,YAAAA,GAAG,CAACoD,SAAJ,CAAc;AAAER,cAAAA,OAAO,EAAE,KAAK9D,KAAL,CAAW4D,GAAX,CAAeE,OAA1B;AAAmCS,cAAAA,IAAI,EAAE,KAAKvE,KAAL,CAAW4D,GAAX,CAAeG,WAAxD;AAAqEoC,cAAAA,GAAG,EAAE;AAA1E,aAAd,EAAgG/E,IAAhG,CACKC,OAAD,IAAa;AACT,kBAAGA,OAAO,CAACe,MAAR,IAAkB,GAArB,EAA0B;AACtB,qBAAKvC,QAAL,CAAc,KAAd,EAAqB;AACjB2C,kBAAAA,SAAS,EAAE,KADM;AAEjBqB,kBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,kBAAAA,OAAO,EAAE,KAHQ;AAIjB8C,kBAAAA,MAAM,EAAE,KAAK3D,KAAL,CAAW4D,GAAX,CAAeD,MAAf,CAAsBuC,MAAtB,CAA6B7E,OAAO,CAACtB,IAArC;AAJS,iBAArB;AAMH,eAPD,MAOO;AACH,qBAAKF,QAAL,CAAc,KAAd,EAAqB;AACjB2C,kBAAAA,SAAS,EAAE,KADM;AAEjBqB,kBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,kBAAAA,OAAO,EAAE;AAHQ,iBAArB;AAKH;AACJ,aAhBL,EAiBKS,KAAD,IAAW;AACP,mBAAKzB,QAAL,CAAc,KAAd,EAAqB;AACjB2C,gBAAAA,SAAS,EAAE,KADM;AAEjBqB,gBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,gBAAAA,OAAO,EAAE;AAHQ,eAArB;AAKH,aAvBL;AAyBH,WA1BM,MA0BA,IAAGmF,UAAU,CAACI,QAAd,EAAwB;AAC3BlF,YAAAA,GAAG,CAACoD,SAAJ,CAAc;AAAER,cAAAA,OAAO,EAAE,KAAK9D,KAAL,CAAW4D,GAAX,CAAeE,OAA1B;AAAmCS,cAAAA,IAAI,EAAE,KAAKvE,KAAL,CAAW4D,GAAX,CAAeG,WAAxD;AAAqEqC,cAAAA,QAAQ,EAAE;AAA/E,aAAd,EAAqGhF,IAArG,CACKC,OAAD,IAAa;AACT,kBAAGA,OAAO,CAACe,MAAR,IAAkB,GAArB,EAA0B;AACtB,qBAAKvC,QAAL,CAAc,KAAd,EAAqB;AACjB2C,kBAAAA,SAAS,EAAE,KADM;AAEjBqB,kBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,kBAAAA,OAAO,EAAE,KAHQ;AAIjB8C,kBAAAA,MAAM,EAAE,KAAK3D,KAAL,CAAW4D,GAAX,CAAeD,MAAf,CAAsBuC,MAAtB,CAA6B7E,OAAO,CAACtB,IAArC;AAJS,iBAArB;AAMH,eAPD,MAOO;AACH,qBAAKF,QAAL,CAAc,KAAd,EAAqB;AACjB2C,kBAAAA,SAAS,EAAE,KADM;AAEjBqB,kBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,kBAAAA,OAAO,EAAE;AAHQ,iBAArB;AAKH;AACJ,aAhBL,EAiBKS,KAAD,IAAW;AACP,mBAAKzB,QAAL,CAAc,KAAd,EAAqB;AACjB2C,gBAAAA,SAAS,EAAE,KADM;AAEjBqB,gBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,gBAAAA,OAAO,EAAE;AAHQ,eAArB;AAKH,aAvBL;AAyBH,WA1BM,MA0BA;AACHK,YAAAA,GAAG,CAACoD,SAAJ,CAAc;AAAER,cAAAA,OAAO,EAAE,KAAK9D,KAAL,CAAW4D,GAAX,CAAeE,OAA1B;AAAmCS,cAAAA,IAAI,EAAE,KAAKvE,KAAL,CAAW4D,GAAX,CAAeG;AAAxD,aAAd,EAAqF3C,IAArF,CACKC,OAAD,IAAa;AACT,kBAAGA,OAAO,CAACe,MAAR,IAAkB,GAArB,EAA0B;AACtB,qBAAKvC,QAAL,CAAc,KAAd,EAAqB;AACjB2C,kBAAAA,SAAS,EAAE,KADM;AAEjBqB,kBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,kBAAAA,OAAO,EAAE,KAHQ;AAIjB8C,kBAAAA,MAAM,EAAE,KAAK3D,KAAL,CAAW4D,GAAX,CAAeD,MAAf,CAAsBuC,MAAtB,CAA6B7E,OAAO,CAACtB,IAArC;AAJS,iBAArB;AAMH,eAPD,MAOO;AACH,qBAAKF,QAAL,CAAc,KAAd,EAAqB;AACjB2C,kBAAAA,SAAS,EAAE,KADM;AAEjBqB,kBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,kBAAAA,OAAO,EAAE;AAHQ,iBAArB;AAKH;AACJ,aAhBL,EAiBKS,KAAD,IAAW;AACP,mBAAKzB,QAAL,CAAc,KAAd,EAAqB;AACjB2C,gBAAAA,SAAS,EAAE,KADM;AAEjBqB,gBAAAA,gBAAgB,EAAE,KAFD;AAGjBhD,gBAAAA,OAAO,EAAE;AAHQ,eAArB;AAKH,aAvBL;AAyBH;AACJ,SA5GA;AA6GDwF,QAAAA,WAAW,EAAGL,UAAD,IAAgB;AACzB,eAAKnG,QAAL,CAAc,KAAd,EAAqB;AACjBkE,YAAAA,WAAW,EAAE,KAAK/D,KAAL,CAAW4D,GAAX,CAAeG,WAAf,GAA6B;AADzB,WAArB;AAGA,eAAKC,OAAL,CAAaJ,GAAb,CAAiB9B,IAAjB,CAAsBkE,UAAtB;AACH,SAlHA;AAmHDM,QAAAA,WAAW,EAAE,MAAM;AACf,eAAKzG,QAAL,CAAc,KAAd,EAAqB;AACjB8D,YAAAA,MAAM,EAAE;AADS,WAArB;AAGH,SAvHA;AAwHD4C,QAAAA,MAAM,EAAE,MAAM;AACV,eAAKvC,OAAL,CAAaJ,GAAb,CAAiB0C,WAAjB;AACA,eAAKzG,QAAL,CAAc,KAAd,EAAqB;AACjBgE,YAAAA,gBAAgB,EAAE,IADD;AAEjBE,YAAAA,WAAW,EAAE;AAFI,WAArB;AAIH;AA9HA;AAtHC,KA4WI;AACVxC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,SAAKM,IAAL;AACH;;AA1ac;AA6anB0E,QAAQ,CAAC5G,KAAD,EAAQ;AACZM,EAAAA,IAAI,EAAEuG,UADM;AAEZ/F,EAAAA,QAAQ,EAAE+F,UAFE;AAGZzG,EAAAA,KAAK,EAAEyG;AAHK,CAAR,CAAR;AAMA,OAAO,IAAIC,KAAK,GAAG,IAAI9G,KAAJ,EAAZ","sourcesContent":["import React from 'react';\n\nexport class Store {\n    // defining store sections\n    system = {\n        isError: false,\n        errorMessage: \"\",\n        loadRetryCount: 0,\n        loadRetryLimit: 3\n    }\n\n    user = {\n        username: \"\",\n        email: \"\",\n        taxon: \"\",\n        createdOn: \"\",\n        isLoggedIn: false,\n        isLoading: true,\n        rank: \"\",\n        images: {\n            profile: \"\"\n        }\n    };\n\n    channels = [];\n\n    cache = {\n        studio: {\n            isLoading: true,\n            isUpdating: false,\n            channel: {\n                title: \"\",\n                subscriberCount: 0,\n                taxon: \"\",\n                images: {\n                    icon: \"\"\n                }\n            },\n            analytics: {\n                isLoading: true,\n                membershipCount: 0,\n                tipCount: 0,\n                statistics: {\n                    totalViewCount: 0,\n                    subscriberCount: 0,\n                    membershipCount: 0\n                }\n            },\n            videos: []\n        },\n        vcc: {\n            isInitialLoading: true,\n            isLoading: true,\n            isError: false,\n            videos: [],\n            perPage: 30,\n            currentPage: 1\n        }\n    }\n\n    // functions for different parts of store\n    actions = {\n        studio: {\n            // studio - load channel\n            loadChannel: (taxon) => {\n                this.cache.studio.isUpdating = true;\n                API.getChannel({taxon: taxon}).then(\n                    (success) => {\n                        if(success.status == 200) {\n                            let c = success.data[0];\n                            this.setCache(\"studio\", {\n                                channel: {\n                                    title: c.title,\n                                    statistics: c.statistics,\n                                    taxon: c.taxon,\n                                    slug: c.slug,\n                                    images: {\n                                        icon: c.channel_picture_url\n                                    }\n                                }\n                            });\n                        }\n                    },\n                    (error) => {\n\n                    }\n                ).finally(\n                    () => {\n                        API.getVideos({page: 1, perPage: 1000, channelTaxon: taxon}).then(\n                            (success) => {\n                                if(success.status == 200) {\n                                    this.setCache(\"studio\", {\n                                        isLoading: false,\n                                        isUpdating: false,\n                                        videos: success.data\n                                    });\n                                }\n                            }\n                        ).finally(\n                            () => {\n                                if(this.cache.studio.videos.length > 0) {\n                                    console.log(this.cache.studio.videos.length);\n                                    for(var v of this.cache.studio.videos) {\n                                        v.processed = true;\n                                        // let m = v.media;\n                                        // v.processed = (m.transforms[240] !== null || m.transforms[480] !== null || m.transforms[720] !== null || m.transforms[1080] !== null);\n                                    }\n                                }\n                            }\n                        );\n                    }\n                );\n\n                API.getChannelAnalytics({channelTaxon: taxon}).then(\n                    (success) => {\n                        if(success.status == 200) {\n                            let a = success.data;\n                            this.setCache(\"studio\", {\n                                analytics: {\n                                    isLoading: false,\n                                    membershipCount: a.membership_count,\n                                    tipCount: a.tip_count,\n                                    statistics: {\n                                        totalViewCount: a.stats ? a.stats.total_view_count : 0,\n                                        subscriberCount: a.stats ? a.stats.subscriber_count : 0,\n                                        membershipCount: a.stats ? a.stats.membership_count : 0\n                                    }\n                                }\n                            });\n                        }\n                    }\n                );\n            },\n            // studio - check video process\n            updateVideoProcess: (taxon, onProgress = null) => {\n                let emitOnProgress = (message) => {\n                    if(onProgress) {\n                        onProgress(message);\n                    }\n                }\n                return new Promise((resolve, reject) => {\n                    emitOnProgress(\"Checking EPIC.IO manifest for \" + taxon + \"...\");\n                    API.getVideoManifest(taxon).then(\n                        (success) => {\n                            // shortnaming manifest\n                            try {\n                                let man = success.data;\n\n                                // checking if manifest has successfully completed\n                                if(man.meta.status === \"SUCCESS\") {\n                                    emitOnProgress(\"Manifest successful for \" + taxon + \"...\");\n\n                                    emitOnProgress(\"Generating transforms for video object...\");\n                                    // generates a valid body for update video with transforms setup\n                                    let body = Utilities.generateUpdateVideoBodyFromManifest(taxon, man);\n\n                                    // updating video object\n                                    API.updateVideo(body).then(\n                                        (success) => {\n                                            // emitOnProgress(\"Video media has been copied successfully.\");\n                                            resolve(\"Video media has been copied successfully.\");\n                                        }\n                                    );\n                                } else {\n                                    console.error(\"Video processing failed from EPIC.IO for \" + taxon + \".\");\n                                    reject(\"Video processing failed from EPIC.IO for \" + taxon + \".\");\n                                }\n                            } catch(error) {\n                                reject(\"Exception occured in manifest function stack\");\n                            }\n                        },\n                        (error) => {\n                            console.log(\"Error reached on video update\");\n                            reject(\"Error reached on video manifest request.\");\n                        }\n                    )\n                });\n            }\n        },\n        vcc: {\n            load: (parameters) => {\n                this.setCache(\"vcc\", {isLoading: true});\n                if(parameters.latest) {\n                    API.getVideos({ perPage: this.cache.vcc.perPage, page: this.cache.vcc.currentPage, latest: true }).then(\n                        (success) => {\n                            if(success.status == 200) {\n                                this.setCache(\"vcc\", {\n                                    isLoading: false,\n                                    isInitialLoading: false,\n                                    isError: false,\n                                    videos: this.cache.vcc.videos.concat(success.data)\n                                })\n                            } else {\n                                this.setCache(\"vcc\", {\n                                    isLoading: false,\n                                    isInitialLoading: false,\n                                    isError: true\n                                });\n                            }\n                        },\n                        (error) => {\n                            this.setCache(\"vcc\", {\n                                isLoading: false,\n                                isInitialLoading: false,\n                                isError: true\n                            });\n                        }\n                    );\n                } else if(parameters.hot) {\n                    API.getVideos({ perPage: this.cache.vcc.perPage, page: this.cache.vcc.currentPage, hot: true }).then(\n                        (success) => {\n                            if(success.status == 200) {\n                                this.setCache(\"vcc\", {\n                                    isLoading: false,\n                                    isInitialLoading: false,\n                                    isError: false,\n                                    videos: this.cache.vcc.videos.concat(success.data)\n                                });\n                            } else {\n                                this.setCache(\"vcc\", {\n                                    isLoading: false,\n                                    isInitialLoading: false,\n                                    isError: true\n                                });\n                            }\n                        },\n                        (error) => {\n                            this.setCache(\"vcc\", {\n                                isLoading: false,\n                                isInitialLoading: false,\n                                isError: true\n                            });\n                        }\n                    );\n                } else if(parameters.trending) {\n                    API.getVideos({ perPage: this.cache.vcc.perPage, page: this.cache.vcc.currentPage, trending: true }).then(\n                        (success) => {\n                            if(success.status == 200) {\n                                this.setCache(\"vcc\", {\n                                    isLoading: false,\n                                    isInitialLoading: false,\n                                    isError: false,\n                                    videos: this.cache.vcc.videos.concat(success.data)\n                                });\n                            } else {\n                                this.setCache(\"vcc\", {\n                                    isLoading: false,\n                                    isInitialLoading: false,\n                                    isError: true\n                                });\n                            }\n                        },\n                        (error) => {\n                            this.setCache(\"vcc\", {\n                                isLoading: false,\n                                isInitialLoading: false,\n                                isError: true\n                            });\n                        }\n                    );\n                } else {\n                    API.getVideos({ perPage: this.cache.vcc.perPage, page: this.cache.vcc.currentPage }).then(\n                        (success) => {\n                            if(success.status == 200) {\n                                this.setCache(\"vcc\", {\n                                    isLoading: false,\n                                    isInitialLoading: false,\n                                    isError: false,\n                                    videos: this.cache.vcc.videos.concat(success.data)\n                                });\n                            } else {\n                                this.setCache(\"vcc\", {\n                                    isLoading: false,\n                                    isInitialLoading: false,\n                                    isError: true\n                                });\n                            }\n                        },\n                        (error) => {\n                            this.setCache(\"vcc\", {\n                                isLoading: false,\n                                isInitialLoading: false,\n                                isError: true\n                            });\n                        }\n                    );\n                }\n            },\n            getNextPage: (parameters) => {\n                this.setCache(\"vcc\", {\n                    currentPage: this.cache.vcc.currentPage + 1\n                });\n                this.actions.vcc.load(parameters);\n            },\n            clearVideos: () => {\n                this.setCache(\"vcc\", {\n                    videos: []\n                })\n            },\n            reinit: () => {\n                this.actions.vcc.clearVideos();\n                this.setCache(\"vcc\", {\n                    isInitialLoading: true,\n                    currentPage: 1\n                })\n            }\n        }\n    }\n\n    // sets cache portion of store (kinda like React setState)\n    setCache(sector, data) {\n        this.cache = {\n            ...this.cache,\n            [sector]: {\n                ...this.cache[sector],\n                ...data\n            }\n        }\n    }\n\n    // clears user info\n    wipeUser() {\n        this.user = {\n            ...this.user,\n            username: \"\",\n            email: \"\",\n            taxon: \"\",\n            createdOn: \"\",\n            isLoggedIn: false,\n            images: {\n                profile: \"\"\n            }\n        }\n        this.channels = []\n    }\n\n    raiseError() {\n        this.system.isError = true;\n        this.system.errorMessage = \"testing\";\n    }\n\n    initializeAnonToken() {\n        this.wipeUser();\n        u.deleteCookie(\"f30_tok\");\n        API.getAnonymousToken().then(\n            (success) => {\n            },\n            (error) => {\n                console.log(\"Error\");\n                console.log(error);\n            }\n        );\n    }\n\n    checkChannelOwnership(taxon) {\n        let isOwnedChannel = this.channels.filter((channel) => {\n            return channel.taxon == taxon\n        })\n\n        return (isOwnedChannel.length > 0 ? true : false);\n    }\n\n    load() {\n        let jwtObject = API.getJWTObject();\n        let unlockEmitter = false;\n\n        if(jwtObject == null || jwtObject == undefined) {\n            this.initializeAnonToken();\n        }\n\n        API.getUser({}).then(\n            (success) => {\n                if (success.status == 200 && success.data.length > 0) {\n                    let u = success.data[0];\n                    unlockEmitter = true;\n                    this.user = {\n                        username: u.username,\n                        email: u.email_address,\n                        taxon: u.taxon,\n                        isLoggedIn: jwtObject.anonymous ? false : true,\n                        createdOn: u.created_on,\n                        isLoading: false,\n                        rank: u.rank,\n                        images: {\n                            profile: u.profile_picture_url\n                        }\n                    }\n                    this.channels = u.channels;\n                } else {\n                    if(this.system.loadRetryCount < this.system.loadRetryLimit) {\n                        this.system.loadRetryCount++;\n                        this.initializeAnonToken();\n                        this.load();\n                        return;\n                    }\n                    this.user = {\n                        ...this.user,\n                        isLoading: false\n                    }\n                    console.log(`Exceeded maximum retry count (out of ${this.system.loadRetryLimit}); halting store intialization.`)\n                }\n            },\n            (error) => {\n                console.log(\"Error\");\n                console.log(error);\n                u.deleteCookie(\"f30_tok\");\n                if(this.system.loadRetryCount < this.system.loadRetryLimit) {\n                    this.system.loadRetryCount++;\n                    this.initializeAnonToken();\n                    this.load();\n                    return;\n                }\n                this.user = {\n                    ...this.user,\n                    isLoading: false\n                }\n                console.log(`Exceeded maximum retry count (out of ${this.system.loadRetryLimit}); halting store intialization.`)\n            }\n        ).finally(() => {\n            if(unlockEmitter) {\n                API.emitter.emit(\"storesynced\");\n            }\n        });\n    }\n\n    constructor() {\n        console.log(\"store init called\");\n        this.load();\n    }\n}\n\ndecorate(Store, {\n    user: observable,\n    channels: observable,\n    cache: observable\n});\n\nexport let store = new Store();\n"]},"metadata":{},"sourceType":"module"}